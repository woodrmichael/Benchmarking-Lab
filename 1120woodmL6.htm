<meta charset="utf-8" lang="en">            <style class="fallback">body{visibility:hidden;}</style>
<!---


                       DOWNLOAD AND OPEN IN A BROWSER
                          TO SEE PROPER FORMATTING


--->
**Lab 6: Benchmarking**
    Username: woodm
    Date: 02-27-2024
    Course: CSC1120
    Submitted to: Dr. Chris Taylor

!!! METRIcS: Instructor Feedback
    | Earned | Possible | Criteria                                         |
    | ------ | -------- | ------------------------------------------------ |
    |   70   |    70    | Technical quality (see point deductions in code) |
    |   15   |    15    | Intermediate commits                             |
    |   10   |    10    | Coding standard compliance and program clarity   |
    |    5   |     5    | Following submission instructions                |

    [Nicely Done](https://msoe.us/taylor/Nice)

# Benchmarker.java

~~~~ Java
/*
 * Course: CSC1120A 121
 * Spring 2023
 * Lab 6 - Benchmarking
 * Name: Michael Wood
 * Created: 2/21/2024
 */
package woodm;

/**
 * This is the class to run the benchmarks.
 */
public class Benchmarker {
    public static void main(String[] args) {
        String help = ListBenchmark.getHelp();
        final int argsCount = 5;
        if(args.length != argsCount) {
            System.out.println(help);
        } else {
            try {
                String listType = args[0];
                String operation = args[1];
                int size = Integer.parseInt(args[2]);
                int multiplier = Integer.parseInt(args[3]);
                int numberOfTests = Integer.parseInt(args[4]);
                long[] values = ListBenchmark.runBenchmarks(listType, operation, size,
                        multiplier, numberOfTests);
                for(int i = 0; i &lt&#xFEFF; values.length; i++) {
                    System.out.format("[%,d ns]  ", values[i]);
                }
            } catch (NumberFormatException e) {
                System.out.println(help);
            } catch (IllegalArgumentException e) {
                System.out.println(e.getMessage());
                System.out.println(help);
            }
        }
    }
}

~~~~

# Launcher.java

~~~~ Java
/*
 * Course: CSC1120A 121
 * Spring 2023
 * Lab 6 - Benchmarking
 * Name: Michael Wood
 * Created: 2/21/2024
 */
package woodm;

/**
 * Class used for running the jar file.
 */
public class Launcher {
    public static void main(String[] args) {
        Benchmarker.main(args);
    }
}

~~~~

# ListBenchmark.java

~~~~ Java
/*
 * Course: CSC1120A 121
 * Spring 2023
 * Lab 6 - Benchmarking
 * Name: Michael Wood
 * Created: 2/21/2024
 */
package woodm;

import java.util.List;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import java.util.Objects;

/**
 * A class used to benchmark different kinds of list methods.
 */
public class ListBenchmark {
    /**
     * Runs the benchmarks a specified amount of time for a specific list.
     * @param listType The type of list to benchmark.
     * @param operation The method to be benchmarked on the list.
     * @param size the size of the list.
     * @param multiplier how much the size of the list should multiply by between each test.
     * @param numberOfTests the amount of tests.
     * @return an array of longs containing the time, in nanoseconds,
     * required for each benchmark to complete.
     *
     * @throws IllegalArgumentException Thrown if listType, operation, size, multiplier,
     * or numberOfTests aren't valid.
     */
    public static long[] runBenchmarks(String listType, String operation, int size, int multiplier,
                                       int numberOfTests) throws IllegalArgumentException {
        checkInputNumbers(size, multiplier, numberOfTests);
        long[] elapsedTimes = new long[numberOfTests];
        for(int i = 0; i &lt&#xFEFF; numberOfTests; i++) {
            Integer[] arr = fillList(size);
            List&lt&#xFEFF;Integer> list = generateList(arr, listType);
            elapsedTimes[i] = runOperation(list, operation);
            size *= multiplier;
        }
        return elapsedTimes;
    }

    /**
     * Returns a string that describes the required command line arguments to the user.
     * @return a string with text describing the required command line arguments.
     */
    public static String getHelp() {
        return """
~~~~ Java highlight
                [listType] [operation] [size] [multiplier] [numberOfTests]
                listType: The type of list to benchmark.
                operation: The method to be benchmarked on the list.
                size: the size of the list.
                multiplier: how much the size of the list should multiply by between each test.
                numberOfTests: the amount of tests.""";
~~~~
!!! MINUS: -1 Include more complete info
    This method should produce a complete help message that completely explains
    how to use this program. It should include a list of all the valid data
    structure types available.

~~~~ Java
    }

    /**
     * Fills an array of integers with a specified size with
     * a random positive integer at each index.
     * @param size the size of the array.
     * @return an array of integers with random integers from 0 to 2^31 -1.
     */
    private static Integer[] fillList(int size) {
        Random generator = new Random();
        Integer[] arr = new Integer[size];
        for(int i = 0; i &lt&#xFEFF; size; i++) {
            arr[i] = generator.nextInt(Integer.MAX_VALUE);
        }
        return arr;
    }

    /**
     * Generates a specific type of list using a given array of random integers.
     * @param arr the array to be converted into a list
     * @param listType the type of list.
     * @return a list of integers with random integers at each index.
     *
     * @throws IllegalArgumentException thrown if size is less than 0 or if listType isn't
     * a valid type. Valid options are 'java.util.ArrayList', 'java.util.LinkedList',
     * 'datastructures.ArrayList', 'datastructures.LinkedList', or 'datastructures.LinkedListTurbo'
     */
    private static List&lt&#xFEFF;Integer> generateList(Integer[] arr, String listType) {
        return switch (listType) {
            case "java.util.ArrayList" -> new ArrayList&lt&#xFEFF;>(Arrays.stream(arr).toList());
            case "java.util.LinkedList" -> new LinkedList&lt&#xFEFF;>(Arrays.stream(arr).toList());
            case "datastructures.ArrayList" -> new datastructures.ArrayList&lt&#xFEFF;>(arr);
            case "datastructures.LinkedList" -> new datastructures.LinkedList&lt&#xFEFF;>(arr);
            case "datastructures.LinkedListTurbo" -> new datastructures.LinkedListTurbo&lt&#xFEFF;>(arr);
            default -> throw new IllegalArgumentException("Invalid listType, please try again");
        };
    }

    /**
     * Runs the specified operation on the list.
     * @param list the list of integers.
     * @param operation the method to be called on the list.
     * @return the amount of time in ns to run the operation.
     *
     * @throws IllegalArgumentException thrown if operation isn't a valid operation.
     * Valid options are 'addToFront', 'contains', or 'indexedContains'.
     */
    private static long runOperation(List&lt&#xFEFF;Integer> list, String operation) {
        Integer value = new Random().nextInt(Integer.MAX_VALUE) * -1;
        long startTime;
        long endTime;
        switch (operation) {
            case "addToFront":
                startTime = System.nanoTime();
                list.add(0, value);
                endTime = System.nanoTime();
                break;
            case "contains":
                startTime = System.nanoTime();
                list.contains(value);
                endTime = System.nanoTime();
                break;
            case "indexedContains":
                startTime = System.nanoTime();
                indexedContains(list, value);
                endTime = System.nanoTime();
                break;
            default:
                throw new IllegalArgumentException("Ensure the operation is valid. " +
                    "Valid options are 'addToFront', 'contains', or 'indexedContains'.");
        }
        return endTime - startTime;
    }

    /**
     * Iterates through the list using an index (calls get()) to find a match.
     * @param list the list of integers.
     * @param value the value to search for.
     */
    private static void indexedContains(List&lt&#xFEFF;Integer> list, Integer value) {
        boolean found = false;
        for(int i = 0; !found && i &lt&#xFEFF; list.size(); i++) {
            if(Objects.equals(value, list.get(i))) {
                found = true;
            }
        }
    }

    /**
     * Checks if the input numbers taken from the command line arguments are valid
     * @param size the size of the list.
     * @param multiplier how much the size of the list should multiply by between each test.
     * @param numberOfTests the amount of tests.
     *
     * @throws IllegalArgumentException Thrown if either size, multiplier,
     * or numberOfTests isn't positive.
     */
    private static void checkInputNumbers(int size, int multiplier, int numberOfTests)
            throws IllegalArgumentException {
        StringBuilder message = new StringBuilder();
        if(size &lt&#xFEFF; 1) {
            message.append("Please ensure size is >= 1\n");
        }
        if(multiplier &lt&#xFEFF; 1) {
            message.append("Please ensure multiplier is >= 1\n");
        }
        if(numberOfTests &lt&#xFEFF; 1) {
            message.append("Please ensure numberOfTests is >= 1\n");
        }
        if(!message.isEmpty()) {
            throw new IllegalArgumentException(message.toString());
        }
    }
}

~~~~

# Commit Log

~~~~
Wed Feb 21 16:48 "Rename-Package" # woodm@msoe.edu
Wed Feb 21 17:03 "Command-Line-Input" # woodm@msoe.edu
Wed Feb 21 17:04 "Command-Line-Input" # woodm@msoe.edu
Wed Feb 21 23:41 "Private-methods-for-ListBenchmark" # woodm@msoe.edu
Mon 07:33 "Benchmark-Parameters-for-java.util-benchmarks" # woodm@msoe.edu
Mon 07:37 "Lab-Completed" # woodm@msoe.edu
Tue 14:11 "Create-report-document" # woodm@msoe.edu
Tue 14:20 "Big-O-Analysis" # woodm@msoe.edu
~~~~

<!-- Markdeep: --><script src="https://csse.msoe.us/markdeep.js?graded"></script>
